package wwe.modules.exploits;

import wwe.modules.*;
import java.util.*;
import wwe.utils.*;
import net.minecraft.network.*;
import net.minecraft.entity.*;
import net.minecraft.client.entity.*;
import wwe.*;
import net.minecraft.network.play.server.*;
import net.minecraft.util.math.*;
import net.minecraft.client.gui.*;
import net.minecraft.network.play.client.*;

public class Test extends qMIe
{
    private List<CPacketPlayer> NWrw;
    private boolean xJBk;
    private int ezCQ;
    private int Ufut;
    public NumberValue timerSpeed;
    public NumberValue speed;
    
    public Test() {
        super("Test", "Test", 0, Category.EXPLOITS);
        this.NWrw = new ArrayList<CPacketPlayer>();
        this.xJBk = false;
        this.ezCQ = 0;
        this.Ufut = 0;
    }
    
    @Override
    public void HrDr() {
        this.timerSpeed = new NumberValue("Timer Speed", this, "Timer speed get good dumbie", 1.4, 0.1, 2.0);
        this.speed = new NumberValue("Speed", this, "Speed get good dumbie", 0.25, 0.0, 1.0);
    }
    
    @Override
    public void LPxx() {
        this.ezCQ = 0;
        if (Wrapper.mc.player != null) {
            this.xJBk = false;
            this.Ufut = 0;
            final CPacketPlayer.Position position = new CPacketPlayer.Position(Wrapper.mc.player.posX, Wrapper.mc.player.posY - 420.69, Wrapper.mc.player.posZ, Wrapper.mc.player.onGround);
            this.NWrw.add((CPacketPlayer)position);
            Wrapper.mc.player.connection.sendPacket((Packet)position);
        }
        hSNE.lyvR(this);
        super.LPxx();
    }
    
    @oqrr
    public void THct(final omqH omqH) {
        if (this.Ufut <= 0) {
            final CPacketPlayer.Position position = new CPacketPlayer.Position(Wrapper.mc.player.posX, Wrapper.mc.player.posY - 420.69, Wrapper.mc.player.posZ, Wrapper.mc.player.onGround);
            this.NWrw.add((CPacketPlayer)position);
            Wrapper.mc.player.connection.sendPacket((Packet)position);
            return;
        }
        vlwv.Axho = this.timerSpeed.OnGi().floatValue();
        Wrapper.mc.player.setVelocity(0.0, 0.0, 0.0);
        if (Wrapper.mc.world.getCollisionBoxes((Entity)Wrapper.mc.player, Wrapper.mc.player.getEntityBoundingBox().expand(-0.0625, 0.0, -0.0625)).isEmpty()) {
            final double n = 0.0;
            final double[] array = this.IYSz(this.speed.OnGi());
            if (Wrapper.mc.gameSettings.keyBindJump.isKeyDown() || Wrapper.mc.gameSettings.keyBindSneak.isKeyDown() || Wrapper.mc.gameSettings.keyBindForward.isKeyDown() || Wrapper.mc.gameSettings.keyBindBack.isKeyDown() || Wrapper.mc.gameSettings.keyBindRight.isKeyDown() || Wrapper.mc.gameSettings.keyBindLeft.isKeyDown()) {
                if (array[0] != 0.0 || n != 0.0 || array[1] != 0.0) {
                    if (Wrapper.mc.player.movementInput.jump && (Wrapper.mc.player.moveStrafing != 0.0f || Wrapper.mc.player.moveForward != 0.0f)) {
                        Wrapper.mc.player.setVelocity(0.0, 0.0, 0.0);
                        this.XNep(0.0, 0.0, 0.0);
                        int i = 0;
                        while (i <= 3) {
                            Wrapper.mc.player.setVelocity(0.0, n * i, 0.0);
                            this.XNep(0.0, n * i, 0.0);
                            ++i;
                        }
                        }
                    }
                    else if (Wrapper.mc.player.movementInput.jump) {
                        Wrapper.mc.player.setVelocity(0.0, 0.0, 0.0);
                        this.XNep(0.0, 0.0, 0.0);
                        int j = 0;
                        while (j <= 3) {
                            Wrapper.mc.player.setVelocity(0.0, n * j, 0.0);
                            this.XNep(0.0, n * j, 0.0);
                            ++j;
                        }
                        }
                    }
                    else {
                        int k = 0;
                        while (k <= 5) {
                            Wrapper.mc.player.setVelocity(array[0] * k, n, array[1] * k);
                            this.XNep(array[0] * k, n, array[1] * k);
                            this.XNep(array[0] * k, n, array[1] * k);
                            ++k;
                        }
                        }
                    }
                }
            }
            else if (Wrapper.mc.world.getCollisionBoxes((Entity)Wrapper.mc.player, Wrapper.mc.player.getEntityBoundingBox().expand(-0.0625, -0.0625, -0.0625)).isEmpty()) {
                final EntityPlayerSP player = Wrapper.mc.player;
                final double n2 = 0.0;
                double n3;
                if (Wrapper.mc.player.ticksExisted % 2 == 0) {
                    n3 = 0.03999999910593033;
                    }
                }
                else {
                    n3 = -0.03999999910593033;
                }
                player.setVelocity(n2, n3, 0.0);
                final double n4 = 0.0;
                double n5;
                if (Wrapper.mc.player.ticksExisted % 2 == 0) {
                    n5 = 0.03999999910593033;
                    }
                }
                else {
                    n5 = -0.03999999910593033;
                }
                this.XNep(n4, n5, 0.0);
            }
        }
        omqH.Ggez(true);
    }
    
    @oqrr
    public void SizH(final uqzS uqzS) {
        if (uqzS.MYlK() instanceof CPacketPlayer && !(uqzS.MYlK() instanceof CPacketPlayer.Position)) {
            uqzS.Ggez(true);
        }
        if (uqzS.MYlK() instanceof CPacketPlayer) {
            final CPacketPlayer cPacketPlayer = (CPacketPlayer)uqzS.MYlK();
            if (this.NWrw.contains(cPacketPlayer)) {
                this.NWrw.remove(cPacketPlayer);
                return;
            }
            uqzS.Ggez(true);
        }
    }
    
    @oqrr
    public void YJRd(final LqJY lqJY) {
        if (lqJY.MYlK() instanceof SPacketPlayerPosLook && Wrapper.mc.player != null && Wrapper.mc.player.isEntityAlive() && Wrapper.mc.world.isBlockLoaded(new BlockPos(Wrapper.mc.player.posX, Wrapper.mc.player.posY, Wrapper.mc.player.posZ)) && !(Wrapper.mc.currentScreen instanceof GuiDownloadTerrain)) {
            final SPacketPlayerPosLook sPacketPlayerPosLook = (SPacketPlayerPosLook)lqJY.MYlK();
            if (this.Ufut <= 0) {
                this.Ufut = sPacketPlayerPosLook.getTeleportId();
            }
            if (this.ezCQ > 0 && this.Ufut > 0) {
                --this.ezCQ;
                lqJY.Ggez(true);
            }
        }
    }
    
    @Override
    public void qBmy() {
        vlwv.Axho = 1.0f;
        hSNE.kduK(this);
        super.qBmy();
    }
    
    private void XNep(final double n, final double n2, final double n3) {
        final CPacketPlayer.Position position = new CPacketPlayer.Position(Wrapper.mc.player.posX + n, Wrapper.mc.player.posY, Wrapper.mc.player.posZ + n3, Wrapper.mc.player.onGround);
        this.NWrw.add((CPacketPlayer)position);
        Wrapper.mc.player.connection.sendPacket((Packet)position);
        final CPacketPlayer.Position position2 = new CPacketPlayer.Position(Wrapper.mc.player.posX + n, Wrapper.mc.player.posY - 420.69, Wrapper.mc.player.posZ + n3, Wrapper.mc.player.onGround);
        this.NWrw.add((CPacketPlayer)position2);
        Wrapper.mc.player.connection.sendPacket((Packet)position2);
        ++this.ezCQ;
        ++this.Ufut;
        Wrapper.mc.player.connection.sendPacket((Packet)new CPacketConfirmTeleport(this.Ufut));
        Wrapper.mc.player.connection.sendPacket((Packet)new CPacketConfirmTeleport(this.Ufut));
    }
    
    public double[] IYSz(final double n) {
        float moveForward = Wrapper.mc.player.movementInput.moveForward;
        float moveStrafe = Wrapper.mc.player.movementInput.moveStrafe;
        float n2 = Wrapper.mc.player.prevRotationYaw + (Wrapper.mc.player.rotationYaw - Wrapper.mc.player.prevRotationYaw) * Wrapper.mc.getRenderPartialTicks();
        if (moveForward != 0.0f) {
            if (moveStrafe > 0.0f) {
                final float n3 = n2;
                int n4;
                if (moveForward > 0.0f) {
                    n4 = -45;
                    }
                }
                else {
                    n4 = 45;
                }
                n2 = n3 + n4;
                }
            }
            else if (moveStrafe < 0.0f) {
                final float n5 = n2;
                int n6;
                if (moveForward > 0.0f) {
                    n6 = 45;
                    }
                }
                else {
                    n6 = -45;
                }
                n2 = n5 + n6;
            }
            moveStrafe = 0.0f;
            if (moveForward > 0.0f) {
                moveForward = 1.0f;
                }
            }
            else if (moveForward < 0.0f) {
                moveForward = -1.0f;
            }
        }
        return new double[] { moveForward * n * Math.cos(Math.toRadians(n2 + 90.0f)) + moveStrafe * n * Math.sin(Math.toRadians(n2 + 90.0f)), moveForward * n * Math.sin(Math.toRadians(n2 + 90.0f)) - moveStrafe * n * Math.cos(Math.toRadians(n2 + 90.0f)) };
    }
}
